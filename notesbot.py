import json
import asyncio
import re
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    filename="bot.log",
    filemode="a"
)

API_TOKEN = '8316022324:AAGzMYcAbYNPTKLQD92RmeqiEyth3D2WiJk'
ADMIN_ID = 5675745209  # –≤–∞—à Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

SCHEDULE_FILE = 'schedule.json'
EVEN_DAYS = [1, 3, 5]  # –≤—Ç–æ—Ä–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥, —Å—É–±–±–æ—Ç–∞ (0-–ø–Ω)
ADMINS_FILE = 'admins.json'
LOG_CHAT_ID = -1002732362235

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
ADMINS_LOG_MSGS_FILE = 'admins_log_msgs.json'

WEEKDAYS_RU = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

USERS_FILE = "users.json"

def load_admins():
    try:
        with open(ADMINS_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return {}

def save_admins(data):
    with open(ADMINS_FILE, 'w') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_admin_log_msgs():
    try:
        with open(ADMINS_LOG_MSGS_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return {}

def save_admin_log_msgs(data):
    with open(ADMINS_LOG_MSGS_FILE, 'w') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# --- FSM –¥–ª—è –∑–∞–ø–∏—Å–∏ ---
class UchStates(StatesGroup):
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_topic = State()
    waiting_for_name = State()

class EditStates(StatesGroup):
    choosing_field = State()
    editing_topic = State()
    editing_time = State()
    editing_name = State()
    editing_join = State()

class WorkStates(StatesGroup):
    choosing_days = State()
    choosing_start_date = State()
    choosing_end_date = State()
    choosing_hours = State()
    confirming = State()

WORK_MODES = {
    "even": [1, 3, 5],      # –≤—Ç–æ—Ä–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥, —Å—É–±–±–æ—Ç–∞
    "odd": [0, 2, 4],       # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞
    "all": [0, 1, 2, 3, 4, 5], # –≤—Å–µ –∫—Ä–æ–º–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
}

def get_schedule_file(user_id):
    return f"schedule_{user_id}.json"

def load_schedule(user_id=None):
    if user_id is None:
        user_id = ADMIN_ID
    fname = get_schedule_file(user_id)
    try:
        with open(fname, 'r') as f:
            return json.load(f)
    except Exception:
        return {}

def save_schedule(data, user_id=None):
    if user_id is None:
        user_id = ADMIN_ID
    fname = get_schedule_file(user_id)
    with open(fname, 'w') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_next_even_days():
    today = datetime.now()
    days = []
    for i in range(7):
        day = today + timedelta(days=i)
        if day.weekday() in EVEN_DAYS:
            days.append(day)
    return days

def sort_slots_by_time(slots):
    def time_key(slot):
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "HH:MM - HH:MM"
        try:
            return datetime.strptime(slot['time'].split('-')[0].strip(), "%H:%M")
        except Exception:
            return datetime.min
    return sorted(slots, key=time_key)

def format_schedule(user_id):
    data = load_schedule(user_id)
    days = get_next_even_days()
    result = "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
    for day in days:
        d_str = f"{WEEKDAYS_RU[day.weekday()]} ({day.strftime('%d.%m.%Y')})"
        result += f"\n<b>{d_str}</b>:\n"
        slots = sort_slots_by_time(data.get(day.strftime('%d.%m.%Y'), []))
        if not slots:
            result += "  –í—Å–µ —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã‚úÖ\n"
        else:
            for slot in slots:
                result += (
                    f"  <b>üìö–¢–µ–º–∞:</b> {slot['topic']}\n"
                    f"  <b>‚è≥–í—Ä–µ–º—è:</b> {slot['time']}\n"
                    f"  <b>‚≠êÔ∏è–ò–º—è:</b> {slot['name']}\n"
                    f"  <b>‚ö°Ô∏è–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è:</b> {', '.join(slot['join']) if slot['join'] else '–ø–æ–∫–∞ –Ω–µ—Ç—É'}\n\n"
                )
    return result

def is_admin(msg):
    admins = load_admins()
    return str(msg.from_user.id) in admins

def is_owner(msg):
    return msg.from_user.id == ADMIN_ID


@dp.message(Command("new"))
async def new_entry(msg: types.Message, state: FSMContext):
    if not is_admin(msg):
        await msg.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω.")
        return
    kb = days_keyboard(str(msg.from_user.id))
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=kb)
    await state.set_state(UchStates.waiting_for_day)

def days_keyboard(admin_id=None):
    if admin_id is None:
        admin_id = ADMIN_ID
    work = load_work_settings(admin_id)
    mode = work['mode'] if work else "even"
    days = get_current_week_days(mode, admin_id)
    buttons = []
    for day in days:
        buttons.append([
            InlineKeyboardButton(
                text=f"{WEEKDAYS_RU[day.weekday()]} {day.strftime('%d.%m')}",
                callback_data=f"day_{day.strftime('%d.%m.%Y')}"
            )
        ])
    # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_back")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

# --- –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@dp.message(Command("mymenu"))
async def admin_menu(msg: types.Message):
    if not is_admin(msg):
        await msg.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω.")
        return
    admin_id = str(msg.from_user.id)
    work = load_work_settings(admin_id)
    mode = work['mode'] if work else "even"
    days = get_current_week_days(mode, admin_id)
    buttons = []
    for day in days:
        buttons.append([
            InlineKeyboardButton(
                text=f"{WEEKDAYS_RU[day.weekday()]} {day.strftime('%d.%m')}",
                callback_data=f"admin_day_{day.strftime('%d.%m.%Y')}"
            )
        ])
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "menu_back")
async def menu_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu_cancel")
async def menu_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è ---
@dp.callback_query(lambda c: c.data.startswith("admin_day_"))
async def admin_day_view(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    admin_id = str(callback.from_user.id)
    day = callback.data.replace("admin_day_", "")
    schedule = load_schedule(admin_id)
    slots = sort_slots_by_time(schedule.get(day, []))
    weekday_ru = WEEKDAYS_RU[datetime.strptime(day, "%d.%m.%Y").weekday()]
    text = f"<b>{weekday_ru} ({day})</b>:\n"
    buttons = []
    for idx, slot in enumerate(slots):
        text += (
            f"  üìö–¢–µ–º–∞: {slot['topic']}\n"
            f"  ‚è≥–í—Ä–µ–º—è: {slot['time']}\n"
            f"  ‚≠êÔ∏è{slot['name']}\n"
            f"  ‚ö°Ô∏è–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è: {', '.join(slot['join']) if slot['join'] else '–ø–æ–∫–∞ –Ω–µ—Ç—É'}\n\n"
        )
        buttons.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {slot['time']}",
                callback_data=f"edit_{day}_{idx}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{day}_{idx}"
            )
        ])
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞" –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞",
            callback_data=f"add_student_{day}"
        )
    ])
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    await callback.message.edit_text(text or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", parse_mode='HTML', reply_markup=kb)
    await callback.answer()
    
@dp.callback_query(lambda c: c.data.startswith("add_student_"))
async def add_student_start(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.replace("add_student_", "")
    await state.update_data(day=day)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_day_{day}")]
        ]
    )
    msg = await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ {day}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 - 13:00):",
        reply_markup=kb
    )
    await state.update_data(prev_msg_id=msg.message_id)
    await state.set_state(UchStates.waiting_for_time)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    admin_id = str(callback.from_user.id)
    work = load_work_settings(admin_id)
    mode = work['mode'] if work else "even"
    days = get_current_week_days(mode, admin_id)
    buttons = []
    for day in days:
        buttons.append([
            InlineKeyboardButton(
                text=f"{WEEKDAYS_RU[day.weekday()]} {day.strftime('%d.%m')}",
                callback_data=f"admin_day_{day.strftime('%d.%m.%Y')}"
            )
        ])
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@dp.callback_query(lambda c: re.fullmatch(r"edit_\d{2}\.\d{2}\.\d{4}_\d+", c.data))
async def edit_menu(callback: types.CallbackQuery, state: FSMContext):
    _, day, idx = callback.data.split("_", 2)
    await state.update_data(day=day, idx=int(idx))
    buttons = [
        [InlineKeyboardButton(text="–¢–µ–º–∞", callback_data="edit_field_topic")],
        [InlineKeyboardButton(text="–í—Ä–µ–º—è", callback_data="edit_field_time")],
        [InlineKeyboardButton(text="–ò–º—è", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ—Å—è", callback_data="edit_field_join")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_day_{day}")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
    await state.set_state(EditStates.choosing_field)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
async def choose_field(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.replace("edit_field_", "")
    data = await state.get_data()
    day = data['day']
    idx = data['idx']
    admin_id = str(callback.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(day)
    if not slots or idx >= len(slots):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return
    slot = slots[idx]
    if field == "topic":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_{day}_{idx}")]
            ]
        )
        msg = await callback.message.edit_text(
            f"–°—Ç–∞—Ä–∞—è —Ç–µ–º–∞: {slot['topic']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
            reply_markup=kb
        )
        await state.update_data(prev_msg_id=msg.message_id)
        await state.set_state(EditStates.editing_topic)
    elif field == "time":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_{day}_{idx}")]
            ]
        )
        msg = await callback.message.edit_text(
            f"–°—Ç–∞—Ä–∞—è –≤—Ä–µ–º—è: {slot['time']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=kb
        )
        await state.update_data(prev_msg_id=msg.message_id)
        await state.set_state(EditStates.editing_time)
    elif field == "name":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_{day}_{idx}")]
            ]
        )
        msg = await callback.message.edit_text(
            f"–°—Ç–∞—Ä–∞—è –∏–º—è: {slot['name']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            reply_markup=kb
        )
        await state.update_data(prev_msg_id=msg.message_id)
        await state.set_state(EditStates.editing_name)
    elif field == "join":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_{day}_{idx}")]
            ]
        )
        msg = await callback.message.edit_text(
            f"–°—Ç–∞—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ—Å—è: {', '.join(slot['join']) if slot['join'] else '–ø–æ–∫–∞ –Ω–µ—Ç—É'}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=kb
        )
        await state.update_data(prev_msg_id=msg.message_id)
        await state.set_state(EditStates.editing_join)
    await callback.answer()

@dp.message(EditStates.editing_topic)
async def edit_topic(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    admin_id = str(msg.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(data['day'])
    if not slots or data['idx'] >= len(slots):
        await msg.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    slots[data['idx']]['topic'] = msg.text
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    new_msg = await msg.answer("–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.update_data(prev_msg_id=new_msg.message_id)
    await state.clear()

@dp.message(EditStates.editing_time)
async def edit_time(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    admin_id = str(msg.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(data['day'])
    if not slots or data['idx'] >= len(slots):
        await msg.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    start, end = parse_time_range(msg.text)
    if not start or not end:
        await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12:00 - 13:00")
        return
    slots[data['idx']]['time'] = msg.text
    # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    slots_sorted = sort_slots_by_time(slots)
    schedule[data['day']] = slots_sorted
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    new_msg = await msg.answer("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.update_data(prev_msg_id=new_msg.message_id)
    await state.clear()

@dp.message(EditStates.editing_name)
async def edit_name(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    admin_id = str(msg.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(data['day'])
    if not slots or data['idx'] >= len(slots):
        await msg.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    slots[data['idx']]['name'] = msg.text
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    new_msg = await msg.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.update_data(prev_msg_id=new_msg.message_id)
    await state.clear()

@dp.message(EditStates.editing_join)
async def edit_join(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    idx = data['idx']
    day = data['day']
    names = [n.strip() for n in msg.text.split(",") if n.strip()]
    admin_id = str(msg.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(day)
    if not slots or idx >= len(slots):
        await msg.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    slot = slots[idx]
    slot['join'] = names
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    new_msg = await msg.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–∏—Ö—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.update_data(prev_msg_id=new_msg.message_id)
    await state.clear()

def save_work_settings(admin_id, mode, intervals):
    fname = f"work_{admin_id}.json"
    with open(fname, "w") as f:
        json.dump({
            "mode": mode,
            "intervals": intervals  # —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (start, end)
        }, f)

def load_work_settings(admin_id):
    fname = f"work_{admin_id}.json"
    try:
        with open(fname, "r") as f:
            return json.load(f)
    except Exception:
        return None

def get_days_by_mode(mode):
    days = []
    today = datetime.now()
    for i in range(7):
        day = today + timedelta(days=i)
        if day.weekday() in WORK_MODES[mode]:
            days.append(day)
    return days

def get_free_slots(slots, intervals):
    busy = []
    for slot in slots:
        s, e = parse_time_range(slot['time'])
        busy.append((s, e))
    free = []
    for start_hour, end_hour in intervals:
        current = datetime.strptime(start_hour, "%H:%M").time()
        end = datetime.strptime(end_hour, "%H:%M").time()
        for s, e in busy:
            if current < s and s < end:
                free.append((current, s))
            current = max(current, e)
        if current < end:
            free.append((current, end))
    return free

def format_day_with_free(day, slots, intervals):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏ –∏ —Ä–∞–±–æ—á–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
    """
    text = ""
    slots = sort_slots_by_time(slots)
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ busy –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    busy = []
    for slot in slots:
        s, e = parse_time_range(slot['time'])
        busy.append((s, e))
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_intervals = []
    for start_hour, end_hour in intervals:
        start = datetime.strptime(start_hour, "%H:%M").time()
        end = datetime.strptime(end_hour, "%H:%M").time()
        all_intervals.append((start, end))
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –∑–∞–Ω—è—Ç–æ–≥–æ —Å–ª–æ—Ç–∞)
    events = []
    for start, end in all_intervals:
        events.append(('work_start', start))
        events.append(('work_end', end))
    for s, e in busy:
        events.append(('busy_start', s))
        events.append(('busy_end', e))
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    events.sort(key=lambda x: x[1])
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–∞–±–æ—á–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –∏ —Å–ª–æ—Ç–∞–º, –≤—ã–≤–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∑–∞–ø–∏—Å–∏
    for start, end in all_intervals:
        prev_end = start
        for slot in slots:
            s, e = parse_time_range(slot['time'])
            # –ï—Å–ª–∏ —Å–ª–æ—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if s >= start and e <= end:
                if prev_end < s:
                    text += f"  üü¢ –°–≤–æ–±–æ–¥–Ω–æ: {prev_end.strftime('%H:%M')} - {s.strftime('%H:%M')}\n\n"
                text += (
                    f"  <b>üìö–¢–µ–º–∞:</b> {slot['topic']}\n"
                    f"  <b>‚è≥–í—Ä–µ–º—è:</b> {slot['time']}\n"
                    f"  <b>‚≠êÔ∏è–ò–º—è:</b> {slot['name']}\n"
                    f"  <b>‚ö°Ô∏è–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è:</b> {', '.join(slot['join']) if slot['join'] else '–ø–æ–∫–∞ –Ω–µ—Ç—É'}\n\n"
                )
                prev_end = max(prev_end, e)
        if prev_end < end:
            text += f"  üü¢ –°–≤–æ–±–æ–¥–Ω–æ: {prev_end.strftime('%H:%M')} - {end.strftime('%H:%M')}\n\n"
    return text

def format_schedule_with_free(user_id):
    data = load_schedule(user_id)
    work = load_work_settings(user_id)
    if not work:
        return "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    days = get_current_week_days(work['mode'], user_id)
    intervals = work.get('intervals', [])
    result = "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
    for day in days:
        d_str = f"{WEEKDAYS_RU[day.weekday()]} ({day.strftime('%d.%m.%Y')})"
        result += f"\n<b>{d_str}</b>:\n"
        slots = sort_slots_by_time(data.get(day.strftime('%d.%m.%Y'), []))
        result += format_day_with_free(day.strftime('%d.%m.%Y'), slots, intervals)
    return result

async def send_or_update_admin_schedule(admin_id, admin_name, bot):
    text = (
        f"<b>–ì—Ä–∞—Ñ–∏–∫ –∫—Ä—É–≥–ª—è—à–∫–∞</b> <a href=\"tg://user?id={admin_id}\">{admin_name}</a>:\n\n"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏", url=f"tg://user?id={admin_id}")]
        ]
    )
    text += format_schedule_with_free(admin_id).replace("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n", "")
    log_msgs = load_admin_log_msgs()
    msg_id = log_msgs.get(str(admin_id))
    try:
        if msg_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            # (–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Ä–Ω—É—Ç—å edit_message_text –≤ try/except –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É)
            try:
                await bot.edit_message_text(
                    chat_id=LOG_CHAT_ID,
                    message_id=msg_id,
                    text=text,
                    parse_mode='HTML',
                    reply_markup=kb    
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            msg = await bot.send_message(
                chat_id=LOG_CHAT_ID,
                text=text,
                parse_mode='HTML',
                reply_markup=kb
            )
            log_msgs[str(admin_id)] = msg.message_id
            save_admin_log_msgs(log_msgs)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await bot.send_message(
                admin_id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {e}"
            )
        except Exception:
            pass

@dp.message(Command("addadmin"))
async def add_admin(msg: types.Message, state: FSMContext):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    parts = msg.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addadmin <id> <–∏–º—è>")
        return
    admin_id, admin_name = parts[1], parts[2]
    admins = load_admins()
    admins[admin_id] = admin_name
    save_admins(admins)
    # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_file = get_schedule_file(admin_id)
    if os.path.exists(schedule_file):
        os.remove(schedule_file)
    save_schedule({}, admin_id)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    log_msgs = load_admin_log_msgs()
    msg_id = log_msgs.pop(admin_id, None)
    if msg_id:
        try:
            await bot.delete_message(LOG_CHAT_ID, msg_id)
        except Exception:
            pass
    save_admin_log_msgs(log_msgs)
    await msg.answer(f"–ê–¥–º–∏–Ω {admin_name} (id={admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω!")
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await bot.send_message(
        int(admin_id),
        "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω!\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /work."
    )

@dp.callback_query(lambda c: c.data.startswith("work_"))
async def choose_work_mode(callback: types.CallbackQuery, state: FSMContext):
    mode = callback.data.replace("work_", "")
    await state.update_data(mode=mode)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19.08.2025):"
    )
    await state.set_state(WorkStates.choosing_start_date)
    await callback.answer()

@dp.message(WorkStates.choosing_start_date)
async def choose_start_date(msg: types.Message, state: FSMContext):
    try:
        start_date = datetime.strptime(msg.text.strip(), "%d.%m.%Y")
    except Exception:
        await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 19.08.2025")
        return
    await state.update_data(start_date=start_date.strftime("%Y-%m-%d"))
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2025):")
    await state.set_state(WorkStates.choosing_end_date)

@dp.message(WorkStates.choosing_end_date)
async def choose_end_date(msg: types.Message, state: FSMContext):
    try:
        end_date = datetime.strptime(msg.text.strip(), "%d.%m.%Y")
    except Exception:
        await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 25.08.2025")
        return
    await state.update_data(end_date=end_date.strftime("%Y-%m-%d"))
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: HH:MM - HH:MM\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00 - 18:00")
    await state.set_state(WorkStates.choosing_hours)

@dp.message(WorkStates.choosing_hours)
async def choose_work_hours(msg: types.Message, state: FSMContext):
    # –ü—Ä–∏–º–µ—Ä: "12:00-16:00, 18:00-19:30"
    intervals = [s.strip() for s in msg.text.split(",") if s.strip()]
    parsed = []
    for interval in intervals:
        try:
            start, end = interval.split('-')
            start = datetime.strptime(start.strip(), "%H:%M").time()
            end = datetime.strptime(end.strip(), "%H:%M").time()
            parsed.append((start.strftime("%H:%M"), end.strftime("%H:%M")))
        except Exception:
            await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12:00-16:00, 18:00-19:30")
            return
    data = await state.get_data()
    mode = data.get('mode')
    start_date = data.get('start_date')
    end_date = data.get('end_date')
    if not (mode and start_date and end_date):
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –¥–∞—Ç—ã.")
        return
    admin_id = str(msg.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã!
    save_work_settings(admin_id, mode, parsed)
    save_week_start(admin_id, datetime.strptime(start_date, "%Y-%m-%d"))
    with open(f"week_{admin_id}.json", "w") as f:
        json.dump({"start": start_date, "end": end_date}, f)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    intervals_str = ', '.join([f"{s}-{e}" for s, e in parsed])
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    await msg.answer(
        f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}\n–ß–∞—Å—ã: {intervals_str}\n"
        f"–ù–µ–¥–µ–ª—è: {start_date} ‚Äî {end_date}\n\n–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /work."
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "work_confirm")
async def confirm_work(callback: types.CallbackQuery, state: FSMContext):
    admin_id = str(callback.from_user.id)
    admins = load_admins()
    if admin_id not in admins:
        await callback.message.edit_text(
            "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addadmin <id> <–∏–º—è> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è.",
            reply_markup=None
        )
        await state.clear()
        await callback.answer()
        return
    data = await state.get_data()
    mode = data.get('mode')
    start_hour = data.get('start_hour')
    end_hour = data.get('end_hour')
    if not (mode and start_hour and end_hour):
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —Ä–µ–∂–∏–º –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /work.",
            reply_markup=None
        )
        await state.clear()
        await callback.answer()
        return
    save_work_settings(admin_id, mode, start_hour, end_hour)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º
    await callback.message.edit_text(
        "–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /work.",
        reply_markup=None
    )
    await state.clear()
    await callback.answer()

@dp.message(Command("work"))
async def change_work(msg: types.Message, state: FSMContext):
    if not is_admin(msg):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ß—ë—Ç–Ω—ã–µ –¥–Ω–∏ (–í—Ç, –ß—Ç, –°–±)", callback_data="work_even")],
                [InlineKeyboardButton(text="–ù–µ—á—ë—Ç–Ω—ã–µ –¥–Ω–∏ (–ü–Ω, –°—Ä, –ü—Ç)", callback_data="work_odd")],
                [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∫—Ä–æ–º–µ –≤—Å", callback_data="work_all")]
            ]
        )
    )
    await state.set_state(WorkStates.choosing_days)

@dp.message(Command("admins"))
async def show_admins(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    admins = load_admins()
    if not admins:
        await msg.answer("–ê–¥–º–∏–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n"
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for admin_id, admin_name in admins.items():
        text += f"{admin_name} ‚Äî <code>{admin_id}</code> ‚Äî <a href=\"tg://user?id={admin_id}\">–ø—Ä–æ—Ñ–∏–ª—å</a>\n"
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"deladmin_{admin_id}")
        ])
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="addadmin_btn")
    ])
    await msg.answer(text, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("deladmin_"))
async def delete_admin(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    admin_id = callback.data.replace("deladmin_", "")
    admins = load_admins()
    if admin_id in admins:
        admins.pop(admin_id)
        save_admins(admins)
        await callback.answer("–ê–¥–º–∏–Ω —É–¥–∞–ª—ë–Ω!")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n"
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for aid, aname in admins.items():
            text += f"{aname} ‚Äî <code>{aid}</code> ‚Äî <a href=\"tg://user?id={aid}\">–ø—Ä–æ—Ñ–∏–ª—å</a>\n"
            kb.inline_keyboard.append([
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"deladmin_{aid}")
            ])
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="addadmin_btn")
        ])
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    else:
        await callback.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(lambda c: c.data == "addadmin_btn")
async def add_admin_btn(callback: types.CallbackQuery):
    await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/addadmin <id> <–∏–º—è>")
    await callback.answer()

@dp.message(Command("restart"))
async def restart_all(msg: types.Message):
    if not is_owner(msg):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    admins = load_admins()
    log_msgs = load_admin_log_msgs()
    result = []

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –ª–æ–≥-—á–∞—Ç–µ
    for admin_id, msg_id in log_msgs.items():
        try:
            await bot.delete_message(LOG_CHAT_ID, msg_id)
            result.append(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ {msg_id} –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}")
        except Exception as e:
            result.append(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    for admin_id in admins.keys():
        schedule_file = get_schedule_file(admin_id)
        if os.path.exists(schedule_file):
            os.remove(schedule_file)
            result.append(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule_file}")
        work_file = f"work_{admin_id}.json"
        if os.path.exists(work_file):
            os.remove(work_file)
            result.append(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ {work_file}")

    # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã
    save_admin_log_msgs({})

    # –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for admin_id in admins.keys():
        save_schedule({}, admin_id)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
    for admin_id, admin_name in admins.items():
        asyncio.create_task(
            bot.send_message(
                int(admin_id),
                "–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ —á–∞—Å—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /work."
            )
        )
        result.append(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")

    await msg.answer(
        "–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã! –ö–∞–∂–¥—ã–π –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /work.\n\n" +
        "\n".join(result)
    )


def get_current_week_days(mode, admin_id=None):
    if admin_id is None:
        admin_id = ADMIN_ID
    start = load_week_start(admin_id)
    days = []
    for i in range(7):
        day = start + timedelta(days=i)
        if day.weekday() in WORK_MODES[mode]:
            days.append(day)
    return days

def save_week_start(admin_id, date):
    fname = f"week_{admin_id}.json"
    with open(fname, "w") as f:
        json.dump({"start": date.strftime("%Y-%m-%d")}, f)

def load_week_start(admin_id):
    fname = f"week_{admin_id}.json"
    try:
        with open(fname, "r") as f:
            data = json.load(f)
            return datetime.strptime(data["start"], "%Y-%m-%d")
    except Exception:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
        today = datetime.now()
        return today - timedelta(days=today.weekday())

@dp.callback_query(lambda c: re.fullmatch(r"delete_\d{2}\.\d{2}\.\d{4}_\d+", c.data))
async def delete_slot(callback: types.CallbackQuery, state: FSMContext):
    _, day, idx = callback.data.split("_", 2)
    idx = int(idx)
    admin_id = str(callback.from_user.id)
    schedule = load_schedule(admin_id)
    slots = schedule.get(day, [])
    if not slots or idx >= len(slots):
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    slots.pop(idx)
    schedule[day] = slots
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
    slots = sort_slots_by_time(schedule.get(day, []))
    text = f"<b>{day}</b>:\n"
    buttons = []
    for idx, slot in enumerate(slots):
        text += (
            f"  üìö–¢–µ–º–∞: {slot['topic']}\n"
            f"  ‚è≥–í—Ä–µ–º—è: {slot['time']}\n"
            f"  ‚≠êÔ∏è{slot['name']}\n"
            f"  ‚ö°Ô∏è–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è: {', '.join(slot['join']) if slot['join'] else '–ø–æ–∫–∞ –Ω–µ—Ç—É'}\n\n"
        )
        buttons.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {slot['time']}",
                callback_data=f"edit_{day}_{idx}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{day}_{idx}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    await callback.message.edit_text(text or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", parse_mode='HTML', reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("day_"))
async def uch_choose_day(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.replace("day_", "")
    await state.update_data(day=day)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_back")]
        ]
    )
    msg = await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 - 13:00):",
        reply_markup=kb
    )
    await state.update_data(prev_msg_id=msg.message_id)
    await state.set_state(UchStates.waiting_for_time)
    await callback.answer()

@dp.message(UchStates.waiting_for_time)
async def uch_get_time(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    start, end = parse_time_range(msg.text)
    kb = uch_cancel_keyboard()
    admin_id = str(msg.from_user.id)
    work = load_work_settings(admin_id)
    intervals = work.get('intervals', []) if work else []
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    in_work_time = False
    for interval_start, interval_end in intervals:
        interval_start = datetime.strptime(interval_start, "%H:%M").time()
        interval_end = datetime.strptime(interval_end, "%H:%M").time()
        if start and end and start >= interval_start and end <= interval_end:
            in_work_time = True
            break
    if not start or not end:
        new_msg = await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12:00 - 13:00", reply_markup=kb)
        await state.update_data(prev_msg_id=new_msg.message_id)
        return
    if not in_work_time:
        new_msg = await msg.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb)
        await state.update_data(prev_msg_id=new_msg.message_id)
        return
    new_msg = await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è:", reply_markup=kb)
    await state.update_data(time=msg.text, prev_msg_id=new_msg.message_id)
    await state.set_state(UchStates.waiting_for_topic)

@dp.message(UchStates.waiting_for_topic)
async def uch_get_topic(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    new_msg = await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=uch_cancel_keyboard())
    await state.update_data(topic=msg.text, prev_msg_id=new_msg.message_id)
    await state.set_state(UchStates.waiting_for_name)

@dp.message(UchStates.waiting_for_name)
async def uch_get_name(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    prev_msg_id = data.get('prev_msg_id')
    if prev_msg_id:
        try:
            await bot.delete_message(msg.chat.id, prev_msg_id)
        except Exception:
            pass
    admin_id = str(msg.from_user.id)
    schedule = load_schedule(admin_id)
    day = data['day']
    slot = {
        "topic": data['topic'],
        "time": data['time'],
        "name": msg.text,
        "join": []
    }
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    for existing in schedule.get(day, []):
        if existing['time'] == slot['time']:
            await msg.answer("–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ò–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.")
            await state.clear()
            return
    if day not in schedule:
        schedule[day] = []
    schedule[day].append(slot)
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {slot} –¥–ª—è –¥–Ω—è {day} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {admin_id}")
    schedule[day] = sort_slots_by_time(schedule[day])
    save_schedule(schedule, admin_id)
    admins = load_admins()
    admin_name = admins.get(admin_id, "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await send_or_update_admin_schedule(admin_id, admin_name, bot)
    await msg.answer("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

def uch_cancel_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_back")]
        ]
    )

@dp.callback_query(lambda c: c.data == "uch_cancel")
async def uch_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "new_back")
async def uch_back(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    admin_id = str(callback.from_user.id)
    kb = days_keyboard(admin_id)
    if current_state == UchStates.waiting_for_time.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=kb)
        await state.set_state(UchStates.waiting_for_day)
    elif current_state == UchStates.waiting_for_topic.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        day = data.get('day')
        kb_time = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_back")]
            ]
        )
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 - 13:00):",
            reply_markup=kb_time
        )
        await state.set_state(UchStates.waiting_for_time)
    elif current_state == UchStates.waiting_for_name.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
        kb_topic = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_back")]
            ]
        )
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=kb_topic
        )
        await state.set_state(UchStates.waiting_for_topic)
    else:
        # –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –≤—ã–±–æ—Ä–µ –¥–Ω—è –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
        await state.clear()
    await callback.answer()

def parse_time_range(time_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "HH:MM - HH:MM" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (start, end) –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏.
    –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None).
    """
    try:
        parts = re.split(r"\s*-\s*", time_str)
        if len(parts) != 2:
            return None, None
        start = datetime.strptime(parts[0], "%H:%M").time()
        end = datetime.strptime(parts[1], "%H:%M").time()
        return start, end
    except Exception:
        return None, None

@dp.message(Command("help"))
async def help_command(msg: types.Message):
    text = (
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
        "1Ô∏è‚É£ <b>/mymenu</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ, —É–¥–∞–ª—è–π—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å–∏.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø—Ä—è–º–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.\n"
        "‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤—Ä–µ–º–µ–Ω–∏, –∏–º–µ–Ω–∏ –∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–∏—Ö—Å—è.\n"
        "2Ô∏è‚É£ <b>/new</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –≤—Ä–µ–º—è, —Ç–µ–º—É –∏ –∏–º—è —É—á–µ–Ω–∏–∫–∞.\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–ª–æ—Ç–∞.\n"
        "3Ô∏è‚É£ <b>/work</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏.\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (—á—ë—Ç–Ω—ã–µ/–Ω–µ—á—ë—Ç–Ω—ã–µ/–≤—Å–µ –¥–Ω–∏).\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã.\n"
        "4Ô∏è‚É£ <b>–ö–Ω–æ–ø–∫–∞ \"–ù–∞–∑–∞–¥\"</b> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –≤ –ª—é–±–æ–º –º–µ–Ω—é.\n\n"
        "<b>–ü—Ä–æ—á–µ–µ:</b>\n"
        "‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ –ª–æ–≥-—á–∞—Ç–µ.\n"
        "‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ—à–∏–±–∫–∞.\n"
        "‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìù –ù–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏\" –≤ –≥—Ä–∞—Ñ–∏–∫–µ.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.\n"
    )
    await msg.answer(text, parse_mode="HTML")

@dp.message(Command("users"))
async def show_users(msg: types.Message):
    users = load_users()
    if not users:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b>\n\n"
    for uid, info in users.items():
        username = info.get('username', '')
        first_name = info.get('first_name', '')
        last_name = info.get('last_name', '')
        started = info.get('started', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        profile_link = f'<a href="tg://user?id={uid}">–ø—Ä–æ—Ñ–∏–ª—å</a>'
        text += (
            f"üë§ <b>{first_name} {last_name}</b>\n"
            f"üÜî <code>{uid}</code>\n"
            f"üîó @{username if username else '–Ω–µ—Ç'} | {profile_link}\n"
            f"üìÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: <code>{started}</code>\n\n"
        )
    await msg.answer(text, parse_mode="HTML")

@dp.message()
async def register_user(msg: types.Message):
    users = load_users()
    uid = str(msg.from_user.id)
    if uid not in users:
        users[uid] = {
            "username": msg.from_user.username if msg.from_user.username else "",
            "first_name": msg.from_user.first_name,
            "last_name": msg.from_user.last_name,
            "started": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        save_users(users)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ username –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        updated = False
        if users[uid].get("username", "") != (msg.from_user.username if msg.from_user.username else ""):
            users[uid]["username"] = msg.from_user.username if msg.from_user.username else ""
            updated = True
        if users[uid].get("first_name", "") != msg.from_user.first_name:
            users[uid]["first_name"] = msg.from_user.first_name
            updated = True
        if users[uid].get("last_name", "") != msg.from_user.last_name:
            users[uid]["last_name"] = msg.from_user.last_name
            updated = True
        if updated:
            save_users(users)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
